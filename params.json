{"name":"Mutan","tagline":"Compiler & Language definition for the Ethereum project","body":"Mutan\r\n=====\r\n\r\nMutan is a C-Like language for the Ethereum project. Mutan supports a full, statically typed higher level language that compiles to native Ethereum Assembler.\r\n\r\n## Notation\r\n\r\nThe syntax is specified using Extended Backus-Naur Form (EBNF):\r\n```\r\ndigit excluding zero = \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\r\ndigit                = \"0\" | digit excluding zero ;\r\n```\r\n### Keywords\r\n\r\nThe following keywords are reserved and may not be used at identifiers\r\n```\r\nthis if else return exit for asm store\r\n```\r\n\r\n### Operators and delimiters\r\n\r\nMutan contains the following operators and delimiters (some are wip)\r\n```\r\n+       =       |       (   )\r\n-       ==      &       {   }\r\n*       >=      ++      ;\r\n/       <=      --\r\n```\r\n\r\n### Numeric types\r\n\r\nNumeric types in Mutan can only be represented by integer values and are architecture-independent. They are all represented in big endian byte order. Signed integers aren't supported (yet?)\r\n```\r\nint8        the set of all _unsigned_ integers (0 to 255)\r\nint16       the set of all _unsigned_ integers (0 to 65535)\r\nint32       the set of all _unsigned_ integers (0 to 4294967295)\r\nint64       the set of all _unsigned_ integers (0 to 18446744073709551615)\r\nint256      the set of all _unsigned_ integers (0 to 1.1579209e+77)\r\nbig         same as int256\r\n```\r\n\r\n### Arrays\r\n\r\nArrays are of theoretical unlimited length\r\n```\r\nArrayType   = ElementType \"[\" Number \"]\" .\r\nElementType = Type .\r\n```\r\n\r\nThe following are all valid arrays:\r\n```\r\nint16[10] a\r\nint32[10] b\r\nbig[10]   c\r\n```\r\n\r\n## Declarations\r\n\r\nA declaration binds a identifier to a type. Every identifier must be declared. No identifier may be declared twice. All declarations are global (for now, TODO/FIXME).\r\n\r\n```\r\nDeclaration = TypeDecl .\r\n```\r\n\r\nMutan, in it's current state, is globally scoped:\r\n    1. No identifier may be used twice\r\n    2. All identifiers must be declared using a Type\r\n\r\n```\r\nTypes:\r\n    int int8 int16 int32 int64 int256 big\r\n    (todo)\r\n    bool string\r\n```\r\n\r\n## Statements\r\n\r\n```\r\nStatement = Declaration | Block | IfStmt | ForStmt\r\n```\r\n\r\n## Blocks\r\n\r\nBlocks contain, but not necessarily, contain lists of Statements within matching brackets.\r\n\r\n```\r\nBlock = \"{\" StatementList \"}\" .\r\nStatementList = { Statement \";\" } .\r\n```\r\n\r\n## If statements\r\n\r\nIf statements specify the conditional execution of two branches according to the value of an expression. If the expression evaluated to true, the \"if\" branch is executed, else, if present, the else branch is executed.\r\n\r\n```\r\nIfStmt = \"if\" [ SimpleStmt \";\" ] Expression Block [ \"else\" Block ] .\r\n```\r\n\r\n```go\r\nif x < 10 {\r\n   x = maximum\r\n}\r\n```\r\n\r\nThe expression may be preceded by a simple statement which executes before the boolean expression\r\n\r\n```go\r\nif int8 x = this.Value(); x < 10 {\r\n    x = maximum\r\n} else {\r\n    y = 10\r\n}\r\n```\r\n\r\n## For statement\r\n\r\nA \"for\" statements specifies repeated execution of a block, the iteration is controlled by a conditional block.\r\n\r\n```\r\nForStmt = \"for\" [ InitStmt ] \";\" [ Condition ] \";\" [ PostStmt ] .\r\nInitStmt = SimpleStmt .\r\nPostStmt = SimpleStmt .\r\n```\r\n\r\nA \"for\" in it's simplest form is a C-Like \"while\" statement (therefor Mutan doesn't have a \"while\")\r\n\r\n```go\r\nfor a < b {\r\n    a = a * 2\r\n}\r\n```\r\n\r\nA \"for\" statement in it's purest form is controlled my a initialiser, condition and a post statement which will be executed at the end of the Block\r\n\r\n```go\r\nfor int8 = 0; a < b; a++ {\r\n    b = b - 1\r\n}\r\n```\r\n\r\n```\r\nfor cond { T() }         is the same as    for ; cond ; { T() }\r\nfor cond; post { T() }   is the same as    for ; cond; post { T() }\r\n```\r\n\r\n## Build in functions\r\n\r\nmutan comes with a couple build in functions\r\n\r\n```go\r\nExit()                                             Stops the execution of the current call\r\nCall(address, value, gas, calldata, returndata)    Calls another contract (e.g. closure) and executes\r\n```\r\n\r\nThe following build in functions are related to the current executing context (i.e. the closure) and are called in combination with `this`\r\n```\r\nMethod     = \"this\" Dot MethodName Parentheses .\r\nDot        = \".\" .\r\nMethodName = \"DataLoad\" | \"DataSize\" | \"Origin\" | \"Caller\" | \"GasPrice\" | \"Value\" |\r\n             \"Diff\" | \"PrevHash\" | \"Time\" | \"GasPrice\" | \"Number\" | \"Coinbase\" | \"Gas\" .\r\n```\r\n\r\n```\r\nDataLoad      Returns the data attached to this call\r\nDataSize      Returns the size of the data attached to this call\r\nOrigin        Returns the origin address of this execution\r\nCaller        Returns the current caller of the closure\r\nGasPrice      Returns the gas price attached to this call\r\nValue         Returns the value attached to this call\r\nDiff          Returns the current difficulty\r\nPrevHash      Returns the previous block's hash\r\nTime          Returns the current block's timestamp\r\nGasPrice      Returns the attached call's gas price\r\nNumber        Returns the current block's number\r\nCoinbase      Returns the current block's coinbase\r\nGas           Returns the current call's attached amount of gas\r\n```\r\n\r\n## Assembler\r\n\r\nInline assembler is allowed through the `asm` keyword\r\n\r\n```\r\nInlineAssembler = \"asm\" \"(\" Code \")\" .\r\nCode            = \"abcdefghijklmnopqrstuwvxyz\" | \"1234567890\" .\r\n```\r\n\r\n## Basic syntax\r\n\r\n```go\r\nint32 a = 20\r\nint32 b = 10\r\nif a < b {\r\n    Exit()\r\n}\r\n\r\nstore[a] = 10000\r\nstore[b] = this.Origin()\r\n\r\nfor int8 i = 0; i < 10; i++ {\r\n    int32[10] out\r\n    Call(1234567890, 0, 10000, i, out)\r\n}\r\n\r\nasm (\r\n    PUSH 10\r\n    PUSH 0\r\n    MSTORE\r\n)\r\n\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}